CREATE DATABASE IF NOT EXISTS camino_db1
    WITH
    OWNER = postgres
    ENCODING = 'UTF8'
    LOCALE_PROVIDER = 'libc'
    CONNECTION LIMIT = -1
    IS_TEMPLATE = False;



CREATE SCHEMA IF NOT EXISTS common



CREATE EXTENSION IF NOT EXISTS "uuid-ossp";



CREATE TABLE IF NOT EXISTS common.users
(
    id uuid NOT NULL,
    name character varying(64) COLLATE pg_catalog."default",
    role_code character varying(64) COLLATE pg_catalog."default",
    login character varying COLLATE pg_catalog."default",
    password character varying COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    is_deleted boolean,
    CONSTRAINT users_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS common.users
    OWNER to postgres;

COMMENT ON TABLE common.users
    IS 'Список пользователей системы';

COMMENT ON COLUMN common.users.id
    IS 'ID пользователя';

COMMENT ON COLUMN common.users.name
    IS 'имя пользователя';

COMMENT ON COLUMN common.users.role_code
    IS 'код роли';

COMMENT ON COLUMN common.users.login
    IS 'логин пользователя';

COMMENT ON COLUMN common.users.password
    IS 'хэш пароля пользователя';

COMMENT ON COLUMN common.users.description
    IS 'описание пользователя';

COMMENT ON COLUMN common.users.is_deleted
    IS 'признак удаления пользователя';



CREATE TABLE IF NOT EXISTS common.roles
(
    code character varying(16) COLLATE pg_catalog."default" NOT NULL,
    name character varying(32) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT roles_pkey PRIMARY KEY (code)
);

ALTER TABLE IF EXISTS common.roles
    OWNER to postgres;

COMMENT ON TABLE common.roles
    IS 'Список ролей пользователей системы';

COMMENT ON COLUMN common.roles.code
    IS 'код роли';

COMMENT ON COLUMN common.roles.name
    IS 'имя роли';



CREATE TABLE IF NOT EXISTS common.privileges
(
    code character varying(32) COLLATE pg_catalog."default" NOT NULL,
    name character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT privileges_pkey PRIMARY KEY (code)
);

ALTER TABLE IF EXISTS common.privileges
    OWNER to postgres;

COMMENT ON TABLE common.privileges
    IS 'список прав пользователей системы';

COMMENT ON COLUMN common.privileges.code
    IS 'код права (используется в скриптах бэкенда)';

COMMENT ON COLUMN common.privileges.name
    IS 'имя права';



CREATE TABLE IF NOT EXISTS common.roles_privileges
(
    role_code character varying(16) COLLATE pg_catalog."default" NOT NULL,
    privilege_code character varying(32) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT privilege_code FOREIGN KEY (privilege_code)
        REFERENCES common.privileges (code) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT role_code FOREIGN KEY (role_code)
        REFERENCES common.roles (code) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);

ALTER TABLE IF EXISTS common.roles_privileges
    OWNER to postgres;

COMMENT ON TABLE common.roles_privileges
    IS 'Список привязок прав к ролям пользователей';

COMMENT ON COLUMN common.roles_privileges.role_code
    IS 'Код роли';

COMMENT ON COLUMN common.roles_privileges.privilege_code
    IS 'Код права';



CREATE TABLE IF NOT EXISTS common.sessions
(
    user_id uuid,
    token character varying(256) COLLATE pg_catalog."default",
    dt_start timestamp without time zone,
    life integer,
    is_ended boolean,
    CONSTRAINT user_id FOREIGN KEY (user_id)
        REFERENCES common.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);

ALTER TABLE IF EXISTS common.sessions
    OWNER to postgres;

COMMENT ON COLUMN common.sessions.user_id
    IS 'ID пользователя';

COMMENT ON COLUMN common.sessions.token
    IS 'токен сессии пользователя';

COMMENT ON COLUMN common.sessions.dt_start
    IS 'начало сессии';

COMMENT ON COLUMN common.sessions.life
    IS 'длительность сессии, минут';

COMMENT ON COLUMN common.sessions.is_ended
    IS 'признак конца действия токена';



CREATE TABLE IF NOT EXISTS common.projects
(
    id uuid NOT NULL,
    name character varying(255) COLLATE pg_catalog."default",
    type_id integer,
    description text COLLATE pg_catalog."default",
    author_id uuid NOT NULL,
    dt_created timestamp without time zone,
    is_deleted boolean,
    CONSTRAINT projects_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS common.projects
    OWNER to postgres;

COMMENT ON TABLE common.projects
    IS 'Список проектов';

COMMENT ON COLUMN common.projects.id
    IS 'ID проекта';

COMMENT ON COLUMN common.projects.name
    IS 'наименование проекта';

COMMENT ON COLUMN common.projects.type_id
    IS 'тип проекта (enum: 0 – обучение, 1 - оценка)';

COMMENT ON COLUMN common.projects.description
    IS 'описание проекта';

COMMENT ON COLUMN common.projects.author_id
    IS 'ID создателя проекта';

COMMENT ON COLUMN common.projects.dt_created
    IS 'дата и время создания проекта';

COMMENT ON COLUMN common.projects.is_deleted
    IS 'признак удаления проекта';



CREATE TABLE IF NOT EXISTS common.project_tags
(
    project_id uuid NOT NULL,
    tag character varying(64) COLLATE pg_catalog."default"
);

ALTER TABLE IF EXISTS common.project_tags
    OWNER to postgres;

COMMENT ON TABLE common.project_tags
    IS 'Список тегов проектов (опционально, для систематизации проектов)';

COMMENT ON COLUMN common.project_tags.project_id
    IS 'ID проекта';

COMMENT ON COLUMN common.project_tags.tag
    IS 'Тэг';



CREATE TABLE IF NOT EXISTS common.project_users
(
    project_id uuid,
    user_id uuid,
    CONSTRAINT project_id FOREIGN KEY (project_id)
        REFERENCES common.projects (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT user_id FOREIGN KEY (user_id)
        REFERENCES common.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);

ALTER TABLE IF EXISTS common.project_users
    OWNER to postgres;

COMMENT ON TABLE common.project_users
    IS 'Список пользователей системы';

COMMENT ON CONSTRAINT project_id ON common.project_users
    IS 'ID проекта';
COMMENT ON CONSTRAINT user_id ON common.project_users
    IS 'ID прикрепленного пользователя';



CREATE TABLE IF NOT EXISTS common.datasets
(
    id uuid NOT NULL,
    name character varying(64) COLLATE pg_catalog."default",
    type_id integer,
    parent_id uuid,
    project_id uuid,
    source text COLLATE pg_catalog."default",
    nn_original character varying(64) COLLATE pg_catalog."default",
    nn_online character varying(64) COLLATE pg_catalog."default",
    nn_teached character varying(64) COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    author_id uuid,
    dt_created timestamp without time zone,
    dt_calculated timestamp without time zone,
    is_calculated boolean,
    is_deleted boolean,
    CONSTRAINT datasets_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS common.datasets
    OWNER to postgres;

COMMENT ON TABLE common.datasets
    IS 'Список датасетов проектов';

COMMENT ON COLUMN common.datasets.id
    IS 'ID датасета';

COMMENT ON COLUMN common.datasets.name
    IS 'наименование датасета';

COMMENT ON COLUMN common.datasets.type_id
    IS 'тип датасета (enum: 0 – начальный, 1 – контуры, 2 – скелеты, 3 – субконтуры и пр.)';

COMMENT ON COLUMN common.datasets.parent_id
    IS 'ID исходного датасета (если не заполнен, то это начальный датасет)';

COMMENT ON COLUMN common.datasets.project_id
    IS 'ID проекта';

COMMENT ON COLUMN common.datasets.source
    IS 'ссылка на удаленное хранилище файлов начального датасета (внешнее хранилище, URL)';

COMMENT ON COLUMN common.datasets.nn_original
    IS 'хэш Docker-образа исходной ИНС';

COMMENT ON COLUMN common.datasets.nn_online
    IS 'хэш Docker-контейнера работающей ИНС (для получения состояния и статистики при расчете, очищается после работы)';

COMMENT ON COLUMN common.datasets.nn_teached
    IS 'хэш Docker-образа обученной ИНС (только при обучении)';

COMMENT ON COLUMN common.datasets.description
    IS 'описание датасета';

COMMENT ON COLUMN common.datasets.author_id
    IS 'ID создателя датасета';

COMMENT ON COLUMN common.datasets.dt_created
    IS 'дата и время создания датасета';

COMMENT ON COLUMN common.datasets.dt_calculated
    IS 'дата и время расчета датасета';

COMMENT ON COLUMN common.datasets.is_calculated
    IS 'признак «рассчитанного» датасета';

COMMENT ON COLUMN common.datasets.is_deleted
    IS 'признак удаления датасета';



CREATE TABLE IF NOT EXISTS common.files
(
    id uuid NOT NULL,
    name character varying(64) COLLATE pg_catalog."default",
    label character varying(64) COLLATE pg_catalog."default",
    dataset_id uuid,
    thumbnail character varying(64) COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    attributes json,
    author_id uuid,
    dt_created timestamp without time zone,
    dt_uploaded timestamp without time zone,
    is_marked boolean,
    is_deleted boolean,
    CONSTRAINT files_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS common.files
    OWNER to postgres;

COMMENT ON TABLE common.files
    IS 'список файлов датасетов проектов';

COMMENT ON COLUMN common.files.id
    IS 'ID датасета';

COMMENT ON COLUMN common.files.name
    IS 'наименование файла';

COMMENT ON COLUMN common.files.label
    IS 'пользовательская метка файла';

COMMENT ON COLUMN common.files.dataset_id
    IS 'ID датасета';

COMMENT ON COLUMN common.files.thumbnail
    IS 'ссылка на иконку файла';

COMMENT ON COLUMN common.files.description
    IS 'описание датасета';

COMMENT ON COLUMN common.files.attributes
    IS 'атрибуты файла (длительность, камера, кодек и пр.)';

COMMENT ON COLUMN common.files.author_id
    IS 'ID пользователя, загрузившего файл';

COMMENT ON COLUMN common.files.dt_created
    IS 'дата и время создания (записи) файла';

COMMENT ON COLUMN common.files.dt_uploaded
    IS 'дата и время загрузки файла';

COMMENT ON COLUMN common.files.is_marked
    IS 'признак «размеченного» файла (для обучения)';

COMMENT ON COLUMN common.files.is_deleted
    IS 'признак удаления файла';



CREATE TABLE IF NOT EXISTS common.markups
(
    id uuid NOT NULL,
    previous_id uuid,
    dataset_id uuid,
    file_id uuid,
    parent_id uuid,
    mark_time integer,
    mark_path json,
    vector text COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    author_id uuid,
    dt_created timestamp without time zone,
    is_deleted boolean,
    CONSTRAINT markups_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS common.markups
    OWNER to postgres;

COMMENT ON TABLE common.markups
    IS 'Список примитивов датасетов';

COMMENT ON COLUMN common.markups.id
    IS 'ID примитива';

COMMENT ON COLUMN common.markups.previous_id
    IS 'ID исходного примитива, заполняется для скорректированного примитива';

COMMENT ON COLUMN common.markups.dataset_id
    IS 'ID датасета';

COMMENT ON COLUMN common.markups.file_id
    IS 'ID файла датасета, откуда примитив извлечен';

COMMENT ON COLUMN common.markups.parent_id
    IS 'ID примитива входного датасета, откуда примитив извлечен';

COMMENT ON COLUMN common.markups.mark_time
    IS 'момент извлечения примитива (момент времени в файле исходного датасета)';

COMMENT ON COLUMN common.markups.mark_path
    IS 'графический контур (или скелет) примитива (координаты кадра в файле исходного датасета, цвет и пр.)';

COMMENT ON COLUMN common.markups.vector
    IS 'векторное описание примитива (из выходных файлов ИНС, если есть)';

COMMENT ON COLUMN common.markups.description
    IS 'описание примитива';

COMMENT ON COLUMN common.markups.author_id
    IS 'ID создателя примитива (если это не ИНС)';

COMMENT ON COLUMN common.markups.dt_created
    IS 'дата и время создания примитива';

COMMENT ON COLUMN common.markups.is_deleted
    IS 'признак удаления примитива';



CREATE TABLE IF NOT EXISTS common.chains
(
    id uuid NOT NULL,
    name character varying(64) COLLATE pg_catalog."default",
    dataset_id uuid,
    vector text COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    author_id uuid,
    dt_created timestamp without time zone,
    is_deleted boolean,
    CONSTRAINT chains_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS common.chains
    OWNER to postgres;

COMMENT ON TABLE common.chains
    IS 'список цепочек примитивов датасетов';

COMMENT ON COLUMN common.chains.id
    IS 'ID цепочки';

COMMENT ON COLUMN common.chains.name
    IS 'наименование цепочки';

COMMENT ON COLUMN common.chains.dataset_id
    IS 'ID датасета';

COMMENT ON COLUMN common.chains.vector
    IS 'векторное описание цепочки (из выходных файлов ИНС, если есть)';

COMMENT ON COLUMN common.chains.description
    IS 'описание цепочки';

COMMENT ON COLUMN common.chains.author_id
    IS 'ID создателя цепочки (если это не ИНС)';

COMMENT ON COLUMN common.chains.dt_created
    IS 'дата и время создания цепочки';

COMMENT ON COLUMN common.chains.is_deleted
    IS 'признак удаления цепочки';



CREATE TABLE IF NOT EXISTS common.markups_chains
(
    chain_id uuid,
    markup_id uuid,
    npp integer,
    CONSTRAINT chain_id FOREIGN KEY (chain_id)
        REFERENCES common.chains (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT markup_id FOREIGN KEY (markup_id)
        REFERENCES common.markups (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);

ALTER TABLE IF EXISTS common.markups_chains
    OWNER to postgres;

COMMENT ON COLUMN common.markups_chains.chain_id
    IS 'ID цепочки';

COMMENT ON COLUMN common.markups_chains.markup_id
    IS 'ID примитива (при коррекции примитива его ID в цепочке должен подменяться)';

COMMENT ON COLUMN common.markups_chains.npp
    IS 'порядковый номер примитива в цепочке';



INSERT INTO common.roles(code, name) VALUES ('admin', 'admin');
INSERT INTO common.roles(code, name) VALUES ('manager', 'manager');
INSERT INTO common.roles(code, name) VALUES ('operator', 'operator');
INSERT INTO common.users(
        id, name, role_code, login, password, description, is_deleted)
        VALUES (uuid_generate_v4() , 'admin', 'admin', 'admin', '12345678', 'first user', False);

-- INSERT INTO common.projects(
--    id, name, type_id, description, author_id, dt_created, is_deleted)
--    VALUES (uuid_generate_v4() , 'first', 1, 'descr', uuid_generate_v1(), '2024-01-26 10:48:00', False );